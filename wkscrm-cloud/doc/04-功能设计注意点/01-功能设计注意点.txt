1、数据状态的控制：
   数据状态的控制设计方案见难点功能设计图，使用bitmap进行数据存储。
   若大数据存储选型定为clickhouse，则这个设计方案可以转移到clickhouse中，使用clickhouse的bitmap.
2、数据下发：
   原先流程：数据平台下发数据，数据状态的变化为下发中--电销同步后批次状态为已同步--数据平台识别已同步状态下发回写将数据状态变为已下发。
   新流程设计：数据状态取消原先的下发中状态，不管电销是否同步，数据平台将数据下发至电销就判定为已下发，数据平台不再做下发回写。
   原因：有些系统上数据下发至电销后，电销未正常同步，数据平台状态一直为已下发，运维问题总是先落到数据平台，花时间定位后才能找到问题点。本次设计避免掉这个问题，将边界界定清楚。
3、消息队列：
   1、评估下发策略是否可使用死信队列的设计做延时消息的发送。
   2、快速下发数据有时效性要求，如果消息队列发送消息拥堵，这种情况下如何保证快速下发数据的时效性？ 设计方案同上，使用死信队列的设计做延时消息的发送。
        设计方案见难点功能设计图。
   3、消息队列如何做可靠通信？生产者发送消息丢失了怎么办？队列宕机消息丢失了怎么办？消费者消费消息丢失了怎么办？
      生产者发送消息要采用comfirm机制，评估失败后如何做补偿。
      队列本身高可用部署。
      消费者开启手动签收，消费成功后再签收。
   4、消息队列重复消费的问题怎么解决？
      幂等处理，评估是否有必要为消息生成全局唯一id.
   5、全局唯一ID怎么生成？
      redis、雪花算法都可以。
4、数据采集服务：
   采集形式多种多样：excel、接口。采集类型多样：计划、名单、策略。。。
   要做好代码设计，使用设计模式合理规划代码，代码扩展性要高，封装性、灵活性要好，新数据商接入时要能快速接入。
5、规则抽取：
   数据采集规则、数据评分规则、策略规则。使用规则的地方很多，未来变化也多，引入规则引擎，做规则配置化。这部分要好好做设计。选型不建议drools,难度大。调研easyrules是否可行。
6、所有的feign调用，接口要写在common-feign中，做统一管理。feign接口一律做fallback处理，采用工厂模式，发生异常后可打印异常。这一条是硬性规范。
7、分布式事务：框架提供了seata,默认关闭。不建议使用，影响性能。
8、名单表对应的bean和xml做灵活设计 不要写的太死 不然标签用完新增字段的时候坑太多。


