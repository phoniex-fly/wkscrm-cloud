一、微服务划分思想：
 横向拆分：先根据业务块拆分出业务服务
   1、采集服务：采集excel数据和接口数据(包括线索(赠险/非赠险)、策略/计划、清洗、除重、回写(包括原概念的数据回写和标签任务)、自建),标准化数据格式(包括部分字段补全)后，
              将数据放入不同的采集通道(快速下发通道、入库通道、策略通道、清洗通道、除重通道、赠险通道)。
   2、策略服务：1)、从策略通道中获取下发策略、下发计划，生成策略/计划任务。
              2)、定时调度计划任务，查找需下发的名单，将名单数据放入下发通道。
   3、线索服务：从采集通道中获取线索数据，解析成功后进入线索库。如果数据需要入库，将数据放入入库通道。
   4、客户服务：对接clickhouse库
              1、从入库通道中获取入库数据，解析成功后进行入库。
              2、从除重通道中获取除重数据，解析成功后进行除重。
              3、从清洗通道中获取清洗数据、解析成功后进行清洗。
              4、画像服务：将标签服务的标签脚本及执行频率同步一份到本地，客户服务定时调度标签任务，描绘用户画像。
              5、客户盘点。
   5、推送服务：数据推送，从下发通道、快速下发通道、赠险通道中获取下发数据，调用第三方接口，向第三方系统推送数据。该服务为统一对接外部系统推送数据的服务，任何对接第三方的推出去的数据统一从这个服务对接。
   6、标签服务：标签的基本管理
   7、基础服务：菜单、权限、用户配置等基本功能。
   8、报表服务：系统报表，对接clickhouse库。
 纵向拆分：再根据公共功能拆分出基础模块
   9、规则服务：采集动作、解析动作均涉及规则，将规则配置化，缓存在redis中。
   10、文件服务：系统中所有导入导出功能所产生的文件由文件服务管理。
   11、代码生成：基础开发代码生成，各个模块都需要。

   较原先的变化：1、去除解析服务，将解析动作划分至具体的业务服务各自进行解析。
              2、去除任务调度服务，因为标签任务的执行频率分散在了具体的标签任务上，不再适合集中调度。故而将标签任务、策略/计划的调度分散在了各自的微服务自行进行调度(标签任务调度在客户服务上)。
              3、增加规则服务，多处服务使用到复杂且易变的规则，将规则抽离配置化，缓存至redis。规则服务启动时需进行redis数据预热。


二、消息队列设计：
   快速下发通道：快速下发线索。
   正常下发通道：非快速下发的线索，包括接口线索、策略/计划的盘点名单
   入库通道：回写、自建、线索(赠险/非赠险)数据
   策略通道：策略、计划数据
   清洗通道：清洗数据
   除重通道：除重数据
   赠险通道：赠险线索

   采集服务采集到回写、自建、线索(赠险/非赠险)数据后，1、将数据放入入库通道做数据入库准备，
                                            2、判断数据若需快速下发，则同时放入快速下发通道做快速下发准备。
                                            3、判断数据若需赠险，同时放入赠险通道做赠险准备。
             也就是说一条线索进来后，需要赠险同时需要快速下发，则数据在3个入库、下发、赠险通道中同时存在(不必3个通道中数据字段一模一样，只放需要的信息即可)。

   死信队列的设计采用不采用均可，按服务的设计方式定。

   需考虑的问题：清洗、除重是否可并入入库通道？根据清洗、除重流程评估。

三、成功下发保证：
   消息发送、队列接收、消息消费、调用接口下发都需做数据不丢失保证。
   消息发送、队列接收、消息消费成功下发保证解决方案见01-功能设计注意点3.3。
   调用接口下发的成功保证需开启重试机制，下发失败重试多次。最终失败记录数据进行人工处理。重试开启采用spring-retry组件。
四、不重复下发保证：
   数据下发除了在策略盘点数据时筛选可下发的数据，在推送服务做下发推送时也需做一次数据数据状态判断(可能存在队列重复消费的情况)，
   同时电销加载了数据以后也需要做一次数据状态的判断，如果数据已经使用则不再加载(平台推送服务会开启失败重试，不排除网络抖动的情况导致数据重复下发)。

五、数据轨迹记录：
   所有数据的变化需要记录轨迹。升级设计不采用轨迹表的设计形式。采用事件驱动的方式记录数据的每次操作动作，clickhouse负责存储数据轨迹。
