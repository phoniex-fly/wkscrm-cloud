以02-技术架构图.jpg为准进行说明：（以下为生产配置说明，测试环境均单节点即可）
一、前端：
   nginx部署请采用动静分离的形式，前端项目部署在nginx下，外部接口请求和前端项目请求统一都经nginx转发至网关。
   静态资源从nginx直接获取，动态资源需要经过nginx转发至网关，注意前端项目不要将动态请求从前端直接请求至网关，所有请求对准nginx端口，非网关端口。
二、服务治理：
   1、网关：高可用部署，双节点/三节点均可。
   2、注册中心、配置中心：nacos高可用部署，双节点/三节点均可，nacos部署后，配置文件的存储形式默认使用的是内部存储，需调整为采用mysql存储，参考/docker/nacos/conf/application.properties。
   3、认证中心、服务监控、服务限流：根据实际情况选择，可采用单节点。
三、业务服务：
   根据实际情况，流量大的服务可多节点部署。
四、中间件：
   1、redis:因redis中数据量不大，无需进行数据分片，可采用哨兵模式进行高可用部署。
         部署方案：三个redis节点，三个sentinel节点，一个sentinel监控一个redis,三个sentinel相互监控。
         数据持久化方案：此种模式下，三个redis节点的数据是完全相同的，为进一步保证数据安全性，redis需开启数据持久化，使用rdb和aof相结合的持久化方式最大程度减少宕机恢复的数据损失。
         redis性能：单机redis支持每秒11万读取，9万写入。
   2、rabbitMQ:高可用部署。
         部署方案：3个节点，镜像集群模式：两两镜像即可。队列持久化、消息持久化。（具体方案找雷哥碰，或者后期做性能测试根据结果选择部署方案）。
五、存储：
   1、mysql:两台服务器，主机读写、从机热备，主机中创建不同的数据库，各微服务对应各自的数据库。
   2、大数据选型：暂定clickhouse
六：运维设施：
   1、ELK:日志统一采集，logback中做logstash相关配置，通过logstash管道将日志采集到elasticsearch，kibana是elasticsearch的可视化工具，通过kibanna进行可视化查询。
       elasticsearch查询语言较为复杂，可考虑使用es-sql插件，通过sql语句查询即可。
   2、pinpoint/skywalking:APM性能监测工具，docker安装会更方便一点。分为pinpoint-hbase数据库、pinpoint-core核心，pinpoint-web可视化页面、pinpoint-agent采集。
                       agent运行在客户端，微服务启动时增加几行配置即可监测服务性能。
   3、devops:
      jira: 任务管理。
      gitlab/git: 代码托管平台。
      sonarcube: 代码质量检测。
      jekins: 自动化部署，代码推送到git上时候，git通过webhook通知jekins进行代码拉取，打包、构建、发版。
      docker: 容器化部署。注意一点，docker安装完成后，需创建一个通信网络，各容器加入该网络中进行通信（容器之间可能需要相互通信，创建网络的通信方式最方便）。
七：容灾：
   1、消息队列发生了消息拥堵，大量消息无法快速消费，怎么办？
      这个要在系统上线前做好充分准备，准备好备份服务，发生拥堵时快速启动备份服务，增加消费者数量，快速消费，恢复正常后再停止备份服务。
      提前准备好，演练好，线上发生故障时，要做到快速响应。
八、压测及调参：
   1、系统上线前数据采集、解析、下发需要做压力测试，尤其是数据采集，明确出正常响应、响应时间下降、资源耗尽无响应时的流量范围，根据实际情况对采集服务的tomcat和服务器做参数优化，增加并发量支持。


